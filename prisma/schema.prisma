// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            Int @id @default(autoincrement())
  name          String
  lastname      String
  email         String @unique
  password      String?
  phone         String?
  biography     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  cognito_id    String?
  isActive      Boolean  @default(true)
  rol           UserRoles @default(ADMINISTRATOR)
  tempPass      String?
  coaches       Coach?
  memberships   Membership[]
  reservations  Reservation[]
  classesDisponibility ClassCoachDisponibility[]
  notifications Notification[]
  paymentClients        Payments[] @relation("Client")
  paymentReceptionst    Payments[] @relation("Receptionst")
  verifiedClasses       Class[]
}

model Coach {
  user_id         Int  @unique
  specializations String
  classes         Class[]
  user            User    @relation(fields: [user_id], references: [id])
}

model MembershipType {
  id              Int @id @default(autoincrement())
  name            String
  description     String
  days_to_access  Int
  price           Float       @default(300.00)
  validity        Int         @default(1)
  membership      Membership[]
  payments        Payments[]
}

model Membership {
  id                  Int @id @default(autoincrement())
  user_id             Int
  membership_type_id  Int
  start_date          DateTime
  end_date            DateTime
  days_to_access      Int
  is_active           Boolean
  user                User            @relation(fields: [user_id], references: [id])
  membership_type     MembershipType  @relation(fields: [membership_type_id], references: [id])
}

model Class {
  id            Int  @id @default(autoincrement())
  name          String
  description   String
  level         String
  date_start    DateTime @unique
  duration      DateTime
  instructor_id Int
  is_active     Boolean
  verified      Boolean @default(false)
  verified_by   Int?
  type          ClassType @default(cycling)
  reservations  Reservation[]
  couchesDisponibility ClassCoachDisponibility[]
  instructor        Coach           @relation(fields: [instructor_id], references: [user_id])
  admin_verified    User?            @relation(fields: [verified_by], references: [id])
}

model Reservation {
  id        Int  @id @default(autoincrement())
  user_id   Int
  class_id  Int
  position  Int?
  user      User    @relation(fields: [user_id], references: [id])
  class     Class   @relation(fields: [class_id], references: [id])
}

model ClassCoachDisponibility {
  user_id   Int
  class_id  Int
  user      User    @relation(fields: [user_id], references: [id])
  class     Class   @relation(fields: [class_id], references: [id])
  @@id([user_id, class_id])
}

model Notification {
  id       Int  @id @default(autoincrement())
  fecha    DateTime @default(now())
  user_id  Int
  title    String
  body     String
  leido    Boolean @default(false)
  user     User    @relation(fields: [user_id], references: [id])
}

model Payments {
  id              Int @id @default(autoincrement())
  client_id       Int
  receptionst_id  Int
  membership_type Int
  date            DateTime @default(now())
  amount          Float
  method          PaymentMethod
  client          User @relation("Client", fields: [client_id], references: [id])
  receptionst     User @relation("Receptionst", fields: [receptionst_id], references: [id])
  membership      MembershipType @relation(fields: [membership_type], references: [id])
}

enum UserRoles {
  RECEPTIONIST
  ADMINISTRATOR
  COACH
  USER
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT
  BANK_TRANSFERS
}

enum ClassType {
  cycling
  barre
}